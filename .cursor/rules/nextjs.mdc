---
description: TypeScriptとTailwind UIを使用したNext.jsのベストプラクティス
globs: **/*.tsx, **/*.ts, src/**/*.ts, src/**/*.tsx
---

# Next.jsベストプラクティス

## プロジェクト構造
- App Routerのディレクトリ構造を使用する
- ルート固有のコンポーネントは`app`ディレクトリに配置する
- 共有コンポーネントは`components`ディレクトリに配置する
- ユーティリティとヘルパーは`lib`ディレクトリに配置する
- ディレクトリには小文字とダッシュを使用する（例：`components/auth-wizard`）

## コンポーネント
- デフォルトではServer Componentsを使用する
- クライアントコンポーネントは明示的に'use client'でマークする
- クライアントコンポーネントはfallbackを伴うSuspenseでラップする
- 重要でないコンポーネントには動的ローディングを使用する
- 適切なエラー境界を実装する
- 静的コンテンツとインターフェースはファイルの末尾に配置する

## パフォーマンス
- 画像の最適化：WebP形式、サイズデータ、遅延読み込みを使用する
- 'useEffect'と'setState'の使用を最小限に抑える
- 可能な限りServer Components（RSC）を優先する
- 重要でないコンポーネントには動的ローディングを使用する
- 適切なキャッシング戦略を実装する

## データ取得
- 可能な場合はデータ取得にServer Componentsを使用する
- データ取得に適切なエラー処理を実装する
- 適切なキャッシング戦略を使用する
- ローディング状態とエラー状態を適切に処理する

## ルーティング
- App Routerの規則を使用する
- ルートに適切なローディング状態とエラー状態を実装する
- 動的ルートを適切に使用する
- 必要に応じて並列ルートを処理する

## フォームとバリデーション
- フォームバリデーションにはZodを使用する
- 適切なサーバーサイドバリデーションを実装する
- フォームエラーを適切に処理する
- フォーム送信中にローディング状態を表示する

## 状態管理
- クライアントサイドの状態を最小限に抑える
- React Contextは慎重に使用する
- 可能な限りサーバー状態を優先する
- 適切なローディング状態を実装する

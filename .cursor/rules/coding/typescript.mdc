---
description: TypeScriptベストプラクティス
globs: **/*.ts,**/*.tsx
alwaysApply: false
---

# TypeScriptベストプラクティス

## 型システム
- オブジェクト定義には`type` を使う
- `any` の使用を避け、未知の型には `unknown` を優先する
- 厳格なTypeScript設定を使用する
- TypeScriptの組み込みユーティリティ型を活用する
- 再利用可能な型パターンにはジェネリクスを使用する

## コード構成
- 型定義は使用される場所の近くに配置する
- 共有される型とインターフェースは専用の型ファイルからエクスポートする
- エクスポートの整理にはバレルエクスポート（index.ts）を使用する
- 共有型は `types` ディレクトリに配置する
- コンポーネントの props はそのコンポーネントと一緒に配置する

## 関数
- 公開関数には明示的な戻り値の型を使用する
- コールバックとメソッドにはアロー関数を使用する
- カスタムエラー型を使用して適切なエラー処理を実装する
- 複雑な型シナリオには関数オーバーロードを使用する
- PromiseよりもAsync/Awaitを優先する

## ベストプラクティス
- tsconfig.json で厳格モードを有効にする
- 不変プロパティには readonly を使用する
- 型安全性のために判別可能なユニオン（discriminated unions）を活用する
- ランタイム型チェックには型ガードを使用する
- 適切な null チェックを実装する
- 必要でない限り型アサーションを避ける

## エラー処理
- ドメイン固有のエラーにはカスタムエラー型を作成する
- 失敗する可能性のある操作にはResult型を使用する
- 適切なエラー境界を実装する
- 型付き catch 句を持つ try-catch ブロックを使用する
- Promiseの拒否を適切に処理する

## パターン
- 複雑なオブジェクト作成にはビルダーパターンを使用する
- データアクセスにはリポジトリパターンを実装する
- オブジェクト作成にはファクトリーパターンを使用する
- 依存性注入を活用する
- カプセル化にはモジュールパターンを使用する

---
description:
globs: *.test.ts
alwaysApply: false
---
# テスト作成のためのルール

## 役割定義

あなたは、TypeScript/JavaScript、フロントエンド開発、バックエンド開発、Vitest、React Testing Libraryを使った単体テストのエキスパートです。簡潔で技術的なコードを、正確な例と正しい型情報を用いて記述します。

## 目的

以下のガイドラインに従って、単体テストを作成してください。
テストは実装の詳細ではなく、振る舞いに焦点を当てたものにしてください。

## 基本原則

1. **テストは設計手法である** - 単なる動作確認ではなく、持続可能な開発を実現するためのもの
2. **認知負荷の最小化** - テストは直感的に理解できるシンプルな構造にする
3. **実装詳細ではなく振る舞いをテスト** - リファクタリング耐性の高いテストを書く
4. **適切なモック戦略** - 外部依存のみをモック化し、内部実装はそのまま使用する

## テスト構造

テストは、AAA（Arrange-Act-Assert）パターンに従って作成してください。
また、各ステップの直上には**その内容を簡潔にまとめたコメント（要約文）**を記載してください。

さらに、コードの意図がひと目で伝わりにくい箇所については、例の `// 軽減税率（8%）` のように、補足コメントを明記するようにしてください。

```js
describe('コンポーネント/関数名', () => {
  describe('機能/シナリオ', () => {
    it('期待される動作を明確に記述', () => {
      // Arrange - 準備：準備に関する要約文
      const value = setupTest();

      // Act - 実行：実行に関する要約文
      const result = functionUnderTest(value);

      // Assert - 確認：確認に関する要約文
      expect(result).toBe(expectedValue);
    });
  });
});
```

例：

```js
describe('calculateTaxForSimplifiedInvoice', () => {
  describe('税込価額を税率ごとに区分して合計した金額に対して税額を計算した場合', () => {
    it('端数を切り捨てること', () => {
      // Arrange - 準備：適格簡易請求書を作成し、品目を追加
      const inv = createSimplifiedInvoice();
      inv.add(new Item('技評茶', 130, 飲料), 2);   // 軽減税率（8%）
      inv.add(new Item('技評酒', 150, 酒類), 3);   // 標準税率（10%）

      // Act - 実行：合計金額（含む税額）を計算
      const total = inv.total();

      // Assert - 確認：税率ごとの税額、および合計税額を検証
      expect(total.tax).toEqual({
        reduced: 19,   // (130*2)*(8/108) = 19.25 → 切り捨てて 19
        standard: 40,  // (150*3)*(10/110) = 40.90 → 切り捨てて 40
        total: 59      // 19 + 40
      });
    });
  });
});
```

## 重要なガイドライン

### 要素選択の優先順位（React）

1. `getByRole`
2. `getByLabelText`
3. `getByText`
4. `getByTestId`（最終手段）

### モック戦略

- 外部依存（API、DB）のみモック化し、アプリケーション内の依存はそのまま使用
- `vi.mock()` : 外部モジュールのモック
- `vi.fn()` : モック関数の作成
- `vi.spyOn()` : 既存メソッドのスパイ
- 各テスト後に `vi.clearAllMocks()` でリセット

### 非同期処理

- `async/await` と `findBy`/`waitFor` を使用、固定タイムアウトは避ける

## 品質基準

### カバレッジ目標

- 全体: 80%以上
- ビジネスロジック: 90%以上
- ユーティリティ関数: 100%
- **注意**: カバレッジは品質の指標の一つに過ぎない

### 良いテストの条件
- 説明的なテスト名で何をテストしているか明確にする
- 適切なエラーメッセージで失敗理由を特定しやすくする
- テスト名と内容が仕様書として機能する
- テストを独立させ、並列実行可能にする

### アンチパターン

- テスト内での条件分岐・反復文
- 実装詳細に依存したテスト
- 過剰なスナップショットテスト
- テスト間での状態共有

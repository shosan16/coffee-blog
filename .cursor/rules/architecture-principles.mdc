---
description: アプリケーションアーキテクチャの原則とパターン
globs: **/*.ts, **/*.tsx
---

# アプリケーションアーキテクチャの原則とパターン

## SOLID原則

- **単一責任 (S)**: 一つのクラスや関数は、一つの責任だけを持つべき
  - 例: データの取得、変換、表示は別々の関数やコンポーネントに分ける
- **オープン・クローズド (O)**: ソフトウェアの構成要素は拡張に対してオープンで、修正に対してクローズドであるべき
  - 例: インターフェースを使用し、具象実装を差し替え可能にする
- **リスコフの置換 (L)**: 派生型（子クラス）は基底型（親クラス）と置換可能であるべき
  - 例: コンポーネントの特殊バージョンは、基本バージョンと同じインターフェースで動作すべき
- **インターフェース分離 (I)**: クライアントは自分が使用しないインターフェースに依存すべきでない
  - 例: Props型を必要最小限に保ち、不要なプロパティを含めない
- **依存性逆転 (D)**: 抽象は詳細に依存すべきでない。詳細が抽象に依存すべき
  - 例: APIクライアントではなく、インターフェースに依存するように設計

## コンポーネントとロジックの分離

- 表示（View）とロジック（Logic）の明確な分離
- React コンポーネントは主に表示に集中し、複雑なロジックはカスタムフックに移行
- データ取得、状態管理、複雑な計算ロジックは専用のフックやユーティリティ関数として分離

## 状態管理

各データタイプに適した管理方法を使用し、単一の信頼源、最小範囲での共有、明示的な操作APIを原則とする。
副作用は分離し、必要な状態のみ永続化する。

| 状態タイプ | 管理方法 | 使用例 |
|------------|----------|--------|
| サーバー状態 | SWR | API取得データ、CRUD操作 |
| グローバル状態 | useContext | テーマ、認証、グローバル設定 |
| 機能状態 | Context + useReducer | 複雑な機能内状態 |
| フォーム状態 | React Hook Form | ユーザー入力、バリデーション |
| URL状態 | Router / useSearchParams | フィルター、ページネーション |
| UI状態 | useState | モーダル表示、ローカルトグル |

## メモ化

メモ化は適切な場所に選択的に適用し、依存配列は最小限に保つ。

| 対象 | 使用するAPI | 適用ケース |
|-----|------------|-----------|
| コンポーネント | `React.memo` | 複雑なコンポーネント、リストアイテム |
| 計算値 | `useMemo` | 高コスト計算（フィルタリング、ソート、変換） |
| 関数 | `useCallback` | 子コンポーネントに渡すイベントハンドラ |

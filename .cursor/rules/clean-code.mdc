---
description:
globs:
alwaysApply: true
---
# クリーンコードガイドライン

## マジックナンバーよりも定数を使用
- ハードコードされた値を名前付き定数に置き換える
- 値の目的を説明する説明的な定数名を使用する
- 定数はファイルの先頭または専用の定数ファイルに保持する

## 意味のある名前
- 変数、関数、クラスはその目的を明らかにすべき
- 名前は、なぜそれが存在するのか、どのように使用されるのかを説明すべき
- 普遍的に理解されていない限り、略語は避ける

## スマートなコメント
- コードが何をするかについてはコメントしない - コード自体を自己文書化する
- コメントは、なぜ特定の方法で何かが行われているのかを説明するために使用する
- API、複雑なアルゴリズム、明白でない副作用を文書化する

## 単一責任の原則
- 各関数は正確に一つのことを行うべき
- 関数は小さく、焦点を絞ったものであるべき
- 関数が何をするかを説明するためにコメントが必要な場合、それは分割すべき

## DRY（Don't Repeat Yourself）
- 繰り返されるコードを再利用可能な関数に抽出する
- 適切な抽象化を通じて共通のロジックを共有する
- 単一の真実のソースを維持する

## クリーンな構造
- 関連するコードを一緒に保つ
- コードを論理的な階層で整理する
- 一貫したファイルとフォルダの命名規則を使用する

## カプセル化
- 実装の詳細を隠す
- 明確なインターフェースを公開する
- ネストされた条件文を適切に名前付けされた関数に移動する

## コード品質の維持
- 継続的にリファクタリングする
- 技術的負債を早期に修正する
- コードを見つけたときよりも清潔に保つ

## テスト
- バグを修正する前にテストを書く
- テストを読みやすく保守しやすくする
- エッジケースとエラー条件をテストする

## バージョン管理
- 明確なコミットメッセージを書く
- 小さく、焦点を絞ったコミットを行う
- 意味のあるブランチ名を使用する
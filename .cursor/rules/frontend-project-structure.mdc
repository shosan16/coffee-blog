---
description: フロントエンドのディレクトリ構造
globs:
alwaysApply: false
---

# プロジェクト構造

## ディレクトリ構造

```
src/
├── app/                  // Next.js App RouterページとUI層
│   ├── (auth)/           // ルートグループ
│   │   ├── login/
│   │   └── register/
│   ├── dashboard/
│   └── layout.tsx
│
├── features/             // ドメイン機能の実装
│   ├── auth/             // 認証機能
│   │   ├── api/
│   │   ├── components/
│   │   ├── hooks/
│   │   ├── types/
│   │   └── utils/
│   ├── users/
│   └── dashboard/
│
└── shared/               // 共有リソースとインフラストラクチャ
    ├── components/       // 共通UIコンポーネント
    │   ├── elements/
    │   ├── form/
    │   ├── layout/
    │   └── feedback/
    ├── config/           // アプリケーション設定
    ├── hooks/            // 共通フック
    ├── lib/              // 外部ライブラリのラッパー
    ├── providers/        // コンテキストプロバイダー
    ├── stores/           // グローバルステート
    ├── types/            // 共通型定義
    └── utils/            // ユーティリティ関数
```

## モジュール管理

### export 規則

**基本ルール:** コンポーネントは **`export default function`** を使用し、それ以外は **`export const`** を使用する

| エクスポート方法 | 対象 |
| --- | --- |
| **`export default function`** | コンポーネント |
| **`export const`** | ユーティリティ、型定義、定数、ヘルパー関数など |

### import 規則

コードの依存関係を明確にするため、以下のインポート規則に従う。

1. **パスの指定方法**:
   - 相対パス（`../` や `./`）ではなく、絶対パス（`@/`）を使用する
   - 例: `import { fetchRecipes } from '@/features/recipes/lib/recipeApi';`
   - これによりファイル移動時の参照エラーを減らし、コードの可読性を向上させる

2. **機能間のインポート**:
   - 他の機能からインポートする場合は公開APIを通じて行うことが推奨される
   - 例: `import { useAuth } from '@/features/auth'`

## 依存関係の方向性

- `app/`は`features/`と`shared/`からインポートできる
- `features/`は`shared/`からインポートできるが、`app/`からはインポートできない
- `shared/`は他のどのディレクトリからもインポートできない（循環依存を防ぐため）

```mermaid
graph TD
    %% 大枠の定義
    subgraph Project
        subgraph shared["shared"]
            components["components"]
            hooks["hooks"]
            lib["lib"]
            types["types"]
            utils["utils"]
        end

        subgraph features["features"]
            comments["comments"]
            discussions["discussions"]
            teams["teams"]
        end

        subgraph application["application"]
            app["app"]
        end

        %% 依存関係の方向性（矢印はインポート元からインポート先へ）
        shared --> features
        shared --> application
        features --> application
    end
```